//
//  BigFormPresenter.swift
//  BigForm
//
//  Generated by ModuleGenerator.
//  Copyright Â© 2020-05-11 07:55:30 +0000 lobster.kz. All rights reserved.
//

import SharedCodeFramework
		
class BigFormPresenter {
	
	weak var view: BigFormViewInput!
	var interactor: BigFormInteractorInput!
	var router: BigFormRouterInput!
	
	var _atrs: FormAttributes? { didSet { render() } }
	var _cats: [Category]? { didSet { render() } }
	
	func render() {
		if let atrs = _atrs, let cats = _cats {
			view.buildForm(with: atrs, and: cats)
		}
	}
	
	var uploadedImagesURLs = [String]()

}

// MARK: ViewController output protocol

protocol BigFormViewOutput {
	func viewIsReady()
}

extension BigFormPresenter: BigFormViewOutput {
	func viewIsReady() {
		view.setupInitialState()
		view.onPressReady = CommandWith<FullForm> { [weak self] fullForm in
			guard let self = self else { return }
			if self.uploadedImagesURLs.isEmpty {
				self.uploadedImagesURLs.append("photo")
			}
			
			var fullForm = fullForm
			
			fullForm.first.photos.append(contentsOf: self.uploadedImagesURLs)
			
			self.submit(fullForm)
		}
		
		view.onPickImage = CommandWith<UIImage> { [weak self] image in
			guard let self = self else { return }
			if let data = image.jpegData(compressionQuality: 0.8) {
				self.interactor.uploadImage(data)
			}
		}
		
		interactor.loadAttributes()
		interactor.loadCategories()
	}
	
	private func submit(_ form: FullForm) {		
		interactor.submit(form)
	}

}

// MARK: Interactor output protocol

protocol BigFormInteractorOutput: class {
	func didSucceedSubmitForm()
	func didFailSubmitForm(with error: Error)
	func didLoad(_ formAttributes: FormAttributes)
	func didFailLoadAttributes(with error: Error)
	func didLoad(_ categories: [Category])
	func didFailLoadCategories(with error: Error)
	func didLoadImage(with response: UploadResponse)
	func didFailLoadImage(with error: Error)
}

extension BigFormPresenter: BigFormInteractorOutput {
	func didLoadImage(with response: UploadResponse) {
		print("Image uploaded",response)
		if let path = response.path {
			uploadedImagesURLs.append(path)
		}
	}
	
	func didFailLoadImage(with error: Error) {
		print("didFailLoadImage",error)
	}

	func didLoad(_ categories: [Category]) {
		_cats = categories
	}
	
	func didFailLoadCategories(with error: Error) {
		print("Fail categoruies:", error)
	}
	
	func didLoad(_ formAttributes: FormAttributes) {
		_atrs = formAttributes
	}
	
	func didFailLoadAttributes(with error: Error) {
		print("Fail loading attributes:", error)
	}
	
	func didSucceedSubmitForm() {
		print("didSucceedSubmitForm")
		view.disPlayAlert(with: l10n(.succeedFormMessage)) { [weak self] in
			self?.view.dismiss(animated: true, completion: nil)
		}
	}
	
	func didFailSubmitForm(with error: Error) {
		print("didFailSubmitForm with error: ",error.localizedDescription)
		view.displayAlert(with: l10n(.errorMessage))
	}

}
