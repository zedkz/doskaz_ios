//
//  BigFormInteractor.swift
//  BigForm
//
//  Generated by ModuleGenerator.
//  Copyright Â© 2020-05-11 07:55:30 +0000 lobster.kz. All rights reserved.
//
import Foundation

protocol BigFormInteractorInput {
	func submit(_ form: FullForm)
	func loadAttributes()
	func loadCategories()
	func uploadImage(_ data: Data)
	func checkPresence(for venue: PotentialVenue)
}

// MARK: Implementation

class BigFormInteractor: BigFormInteractorInput {

	weak var output: BigFormInteractorOutput!
	
	func loadCategories() {
		if let storedCats = CategoriesStorage.shared.retrieveData() {
			output.didLoad(storedCats)
			return
		}
		
		let onSuccess = { [weak self] (categories: [Category]) -> Void in
			self?.output.didLoad(categories)
			CategoriesStorage.shared.store(categories)
		}
		
		let onFailure = { [weak self] (error: Error) -> Void in
			self?.output.didFailLoadCategories(with: error)
		}
		
		APICategories(onSuccess: onSuccess, onFailure: onFailure).dispatch()
	}
	
	func submit(_ form: FullForm) {
		
		let onSuccess = { [weak self] (noContent: Empty) -> Void in
			debugPrint(noContent)
			self?.output.didSucceedSubmitForm()
		}
		
		let onFailure = { [weak self] (error: Error) -> Void in
			self?.output.didFailSubmitForm(with: error)
		}
		
		APIAddObject(onSuccess: onSuccess, onFailure: onFailure, fullForm: form).dispatch()
	}
	
	
	func loadAttributes() {
		if let attrs = FormAttributesStorage.shared.retrieveData() {
			output.didLoad(attrs)
			return
		}
		
		let onSuccess = { [weak self] (formAttributes: FormAttributes) -> Void in
			self?.output.didLoad(formAttributes)
			FormAttributesStorage.shared.store(formAttributes)
		}
		
		let onFailure = { [weak self] (error: Error) -> Void in
			self?.output.didFailLoadAttributes(with: error)
		}
		
		APIFormAttributes(onSuccess: onSuccess, onFailure: onFailure).dispatch()
		
	}
	
	func uploadImage(_ data: Data) {
		let onSuccess = { [weak self] (uploadResponse: UploadResponse) -> Void in
			self?.output.didLoadImage(with: uploadResponse)
		}
		
		let onFailure = { [weak self] (error: Error) -> Void in
			self?.output.didFailLoadImage(with: error)
		}
		
		APIUpload(onSuccess: onSuccess, onFailure: onFailure, image: data).dispatch()
	}
	
	func checkPresence(for venue: PotentialVenue) {
		APICheckPresence(onSuccess: { [weak self] (presence) in
			self?.output?.didSucceedCheck(presence: presence)
		},onFailure: { [weak self] error in
			self?.output.didFailCheckPresence(with: error)
		},
			venue: venue
		)
		.dispatch()
	}

}
		
