//
//  VenueDescriptionPresenter.swift
//  VenueDescription
//
//  Generated by ModuleGenerator.
//  Copyright Â© 2020-04-27 16:23:49 +0000 lobster.kz. All rights reserved.
//
import SharedCodeFramework
		
class VenueDescriptionPresenter {
	
	weak var view: VenueDescriptionViewInput!
	var interactor: VenueDescriptionInteractorInput!
	var router: VenueDescriptionRouterInput!

	var venue: DoskazVenue!
}

// MARK: ViewController output protocol

protocol VenueDescriptionModuleInput {
	func render(doskazVenue: DoskazVenue)
}

protocol VenueDescriptionViewOutput: VenueDescriptionModuleInput {
	func viewIsReady()
}

extension VenueDescriptionPresenter: VenueDescriptionViewOutput {
	func viewIsReady() {
		view.setupInitialState()
		guard let venue = venue else { return }
		let onTouchComplaint = Command { [weak self] in
			guard let self = self else { return }
		
			self.router.presentComplaint(
				with: self.view,
				id: self.venue?.id,
				title: self.venue.title
			)
		}
		
		let onTouchDetailInfo = Command { [weak self] in
			guard let self = self else { return }
			guard let venue = self.venue else { return }
			self.router.presentDetailInfo(with: self.view, venue: venue)
		}
		
		func showSecondAlert() {
			let actions = [
				Action(title: l10n(.yesHelp), handler: { }),
				Action(
					title: l10n(.cancel),
					style: .cancel
				)
			]
			view.showAlert(title: l10n(.foundErrors), message: l10n(.foundErrorsMessage), actions: actions)
		}
		
		let onTouchVerify = Command { [weak self] in
			let actions = [
				Action(
					title: l10n(.no),
					handler: { showSecondAlert() },
					style: .destructive
				),
				Action(title: l10n(.yes), handler: { })
			]
			self?.view.showAlert(
				title: l10n(.verifyObjectData) + " \(venue.title)" ,
				message: l10n(.verifyObjectDataMessage),
				actions: actions
			)
		}
		
		view.rootView.props = VenueDescriptionView.Props(
			venue: venue,
			onTouchComplaint: onTouchComplaint,
			onTouchDetailInfo: onTouchDetailInfo,
			onTouchVerify: onTouchVerify
		)
	}
	
	func render(doskazVenue: DoskazVenue) {
		venue = doskazVenue
	}

}

// MARK: Interactor output protocol

protocol VenueDescriptionInteractorOutput: class {

}

extension VenueDescriptionPresenter: VenueDescriptionInteractorOutput {

}
