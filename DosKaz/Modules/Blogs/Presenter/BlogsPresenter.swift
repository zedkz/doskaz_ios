//
//  BlogsPresenter.swift
//  Blogs
//
//  Generated by ModuleGenerator.
//  Copyright Â© 2020-05-14 17:21:04 +0000 lobster.kz. All rights reserved.
//

import SharedCodeFramework
		
class BlogsPresenter {
	
	weak var view: BlogsViewInput!
	var interactor: BlogsInteractorInput!
	var router: BlogsRouterInput!

}

// MARK: ViewController output protocol

protocol BlogsViewOutput {
	func viewIsReady()
}

extension BlogsPresenter: BlogsViewOutput {
	func viewIsReady() {
		view.setupInitialState()
		view.onSearchFieldEdit = CommandWith<String> { query in
			self.interactor.loadPosts(with: query, categoryId: nil)
		}
		interactor.loadPosts(with: nil, categoryId: nil)
		view.onSelect = CommandWith<Item> { [weak self] blog in
			guard let self = self else { return }
			self.router.showBlog(with: self.view, blog: blog)
		}
		view.onTouchFilter = Command { [weak self] in
			self?.interactor.loadBlogCategories()
		}
		view.onSelectCategory = CommandWith { [weak self] category in
			self?.interactor.loadPosts(with: nil, categoryId: category.id)
		}
	}

}

// MARK: Interactor output protocol

protocol BlogsInteractorOutput: class {
	func didload(_ blogResponse: BlogResponse)
	func didFailLoadBlogResponse(with error: Error)
	func didLoad(_ blogCategories: [BlogCategory])
}

extension BlogsPresenter: BlogsInteractorOutput {
	func didload(_ blogResponse: BlogResponse) {
		print("Blog post count:", blogResponse.items.count)
		let cellsProps = blogResponse.items.map {
			BlogCell.Props(
				item: $0,
				title: $0.title,
				imageURL: $0.image,
				content: $0.annotation ?? "",
				lastLine: $0.datePublished + "  " + $0.categoryName
			)
		}
		view.updateTable(with: cellsProps)
	}
	
	func didFailLoadBlogResponse(with error: Error) {
		view.updateTable(with: [])
	}
	
	func didLoad(_ blogCategories: [BlogCategory]) {
		view.showActionSheet(with: blogCategories)
	}
}
