//
//  BlogsViewController.swift
//  Blogs
//
//  Generated by ModuleGenerator.
//  Copyright Â© 2020-05-14 17:21:04 +0000 lobster.kz. All rights reserved.
//

import UIKit

// MARK: View input protocol

protocol BlogsViewInput where Self: UIViewController {
	func setupInitialState()
	func updateTable(with items: [Item])
}

extension BlogsViewController: BlogsViewInput {

	func setupInitialState() {
		view.backgroundColor = .white
		configureNavigationView()
		buildSearch()
		configureTable()
	}
	
	func updateTable(with items: [Item]) {
		let cellsProps = items.map { BlogCell.Props(title: $0.title) }
		dataSource.cellsProps = cellsProps
		tableView.reloadData()
	}

}

class BlogsViewController: TableViewController {

	var output: BlogsViewOutput!
	var dataSource: UTableViewDataSource<BlogCell>!

	// MARK: Life cycle
	override func viewDidLoad() {
		super.viewDidLoad()
		output.viewIsReady()
	}
	
	private func configureTable() {
		dataSource = UTableViewDataSource<BlogCell>(tableView)
		tableView.dataSource = dataSource
		tableView.tableFooterView = UIView()
		tableView.separatorInset = UIEdgeInsets(all: 0)
	}
	
	private func configureNavigationView() {
		navigationItem.title = l10n(.blog)
		navigationItem.rightBarButtonItem = UIBarButtonItem(
			image: UIImage(named: "filter")?.withRenderingMode(.alwaysOriginal),
			style: .plain,
			target: self,
			action: #selector(didPressFilter)
		)
	}
	
	@objc
	func didPressFilter() {
		print("didpre sep filter")
	}
	
	private func buildSearch() {
		let searchController = UISearchController(searchResultsController: nil)
		searchController.searchResultsUpdater = self
		searchController.hidesNavigationBarDuringPresentation = false
		definesPresentationContext = true
		navigationItem.searchController = searchController
		navigationItem.hidesSearchBarWhenScrolling = false
	}

}

extension BlogsViewController: UISearchResultsUpdating {
	func updateSearchResults(for searchController: UISearchController) {
		
	}

}
