//
//  ComplaintPresenter.swift
//  Complaint
//
//  Generated by ModuleGenerator.
//  Copyright Â© 2020-05-21 07:01:46 +0000 lobster.kz. All rights reserved.
//

import SharedCodeFramework
		
class ComplaintPresenter {
	
	weak var view: ComplaintViewInput!
	var interactor: ComplaintInteractorInput!
	var router: ComplaintRouterInput!

	var cities: [City]? { didSet { render() } }
	var complaintData: ComplaintData? { didSet { render() } }
	var authorities: [Authority]? { didSet { render() } }
	var complaintAtrs: [ComplaintAtr]? { didSet { render() } }
	
	func render() {
		if let cities = cities,
			let complaintData = complaintData,
			let authorities = authorities,
			let complaintAtrs = complaintAtrs {
			view.showInitial(complaintData, cities, authorities, complaintAtrs)
		}
	}
}

// MARK: ViewController output protocol

protocol ComplaintViewOutput {
	func viewIsReady()
}

extension ComplaintPresenter: ComplaintViewOutput {
	func viewIsReady() {
		view.setupInitialState()
		view.onTouchReady = CommandWith<ComplaintData> { data in
			self.interactor.submitComplaint(with: data)
		}
		interactor.loadComplaintData()
		interactor.loadCities()
		interactor.loadAuthorities()
		interactor.loadComplaintAtrs()
	}

}

// MARK: Interactor output protocol

protocol ComplaintInteractorOutput: class {
	func didLoad(_ complaintData: ComplaintData)
	func didFailLoadComplaintData(with error: Error)
	func didLoad(_ cities: [City])
	func didFailLoadCities(with error: Error)
	func didLoad(_ authorities: [Authority])
	func didFailLoadAuthorities(with error: Error)
	func didLoad(_ complaintAtrs: [ComplaintAtr])
	func didFailLoadComplaintAtrs(with error: Error)
	func didSucceedSubmitForm()
	func didFailSubmitForm(with error: Error)
}

extension ComplaintPresenter: ComplaintInteractorOutput {
	func didSucceedSubmitForm() {
		view.displayAlert(with: "Success")
	}
	
	func didFailSubmitForm(with error: Error) {
		view.displayAlert(with: "Fail \(error.localizedDescription)")
	}
	
	func didLoad(_ complaintAtrs: [ComplaintAtr]) {
		self.complaintAtrs = complaintAtrs
	}
	
	func didFailLoadComplaintAtrs(with error: Error) {
		print(error)
	}
	
	func didLoad(_ authorities: [Authority]) {
		self.authorities = authorities
	}
	
	func didFailLoadAuthorities(with error: Error) {
		print(error)
	}
	
	func didLoad(_ cities: [City]) {
		self.cities = cities
	}
	
	func didFailLoadCities(with error: Error) {
		print(error)
	}
	
	func didLoad(_ complaintData: ComplaintData) {
		print("Complaint:", complaintData)
		self.complaintData = complaintData
	}
	
	func didFailLoadComplaintData(with error: Error) {
		print("Fail load complaint with error: ", error.localizedDescription)
	}
}
