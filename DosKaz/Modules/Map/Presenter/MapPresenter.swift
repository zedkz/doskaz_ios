//
//  MapPresenter.swift
//  Map
//
//  Generated by ModuleGenerator.
//  Copyright Â© 2020-02-23 16:55:07 +0000 lobster.kz. All rights reserved.
//
import SharedCodeFramework
import CoreLocation
		
class MapPresenter: MapModuleInput {
	
	weak var view: MapViewInput!
	var interactor: MapInteractorInput!
	var router: MapRouterInput!

}


// MARK: ViewController output protocol

protocol MapViewOutput {
	func viewIsReady()
}

extension MapPresenter: MapViewOutput {
	func viewIsReady() {
		view.setupInitialState()
		view.buildSearch(with: CommandWith<SearchResults> { results in
			print("search started", results)
		})

		view.onSelectVenue = CommandWith<Int> {
			self.interactor.loadObject(with: $0)
		}
		
		view.onPressFilter = Command { [weak self] _ in
			guard let self = self else { return }
			self.router.presentFilter(with: self.view)
		}
		
		view.onRegionChanged = CommandWith<MapRect> { mapInfo in
			self.interactor.loadPointsOnMap(with: mapInfo)
		}
 	}

}


// MARK: Interactor output protocol

protocol MapInteractorOutput: class {
	func didLoad(_ mapObjects: MapObjects)
	func didFailLoadPoints(with error: Error)
	
	func didLoad(_ venue: DoskazVenue)
	func didFailLoadVenue(with error: Error)
}

extension MapPresenter: MapInteractorOutput {
	func didLoad(_ mapObjects: MapObjects) {
		let venues = mapObjects.points.map { point in
			return Venue(
				id: point.id,
				icon: point.icon?.filter { !" ".contains($0) } ?? "",
				color: point.color.uiColor,
				locationName: String(point.id) ,
				coordinate: CLLocationCoordinate2D(
					latitude: point.coordinates[0],
					longitude: point.coordinates[1]
				)
			)
		}
		
		let clusters = mapObjects.clusters.map { cluster in
			return ClusterAnnotation(
				point: CLLocationCoordinate2D(
					latitude: cluster.coordinates[0],
					longitude: cluster.coordinates[1]
				),
				count: cluster.itemsCount
			)
		}
		view.show(venues + clusters)
		
	}
	
	func didFailLoadPoints(with error: Error) {
		
	}
	
	func didLoad(_ venue: DoskazVenue) {
		view.showSheet(for: venue)
	}
	
	func didFailLoadVenue(with error: Error) {
		
	}
	
}

