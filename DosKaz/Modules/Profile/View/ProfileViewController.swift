//
//  ProfileViewController.swift
//  Profile
//
//  Generated by ModuleGenerator.
//  Copyright Â© 2020-05-18 08:16:13 +0000 lobster.kz. All rights reserved.
//

import UIKit

// MARK: View input protocol

protocol ProfileViewInput where Self: UIViewController {
	func setupInitialState()
	var profileView: ProfileView { get }
	func showActionSheet(with actions: [Action])
}

extension ProfileViewController: ProfileViewInput {

	func setupInitialState() {
		view.backgroundColor = .white
		navigationItem.title = l10n(.myProfile)
		configureViews(with: profileView)
		
		let exitButton = UIBarButtonItem(
			image: UIImage(named: "chevron_right_active"), style: .plain,
			target: self, action: #selector(signOut)
		)
		navigationItem.rightBarButtonItem = exitButton
	}
	
	func showActionSheet(with actions: [Action]) {
		let sheet = GenericAlertPresenter(
			title: l10n(.avatarChoice),
			style: .actionSheet,
			actions: actions
		)
		sheet.present(in: self)
	}
	
}

class ProfileViewController: ProfileDrawerViewController {

	var output: ProfileViewOutput!
	let profileView = ProfileView()

	// MARK: Life cycle
	override func viewDidLoad() {
		super.viewDidLoad()
		output.viewIsReady()
	}
	
	override func viewWillAppear(_ animated: Bool) {
		super.viewDidAppear(animated)
		output.viewWillAppear()
	}
	
	@objc func signOut() {
		let actions = [
			Action(title: l10n(.no), style: .cancel),
			Action(title: l10n(.yes), handler: {
				
				AppSettings.token = nil
				
				guard let kiwi = UIApplication.shared.keyWindow else { return }
				let tabbarController = kiwi.rootViewController as? MainTabBarViewController
				let profile = AuthBuilder().assembleTab()
				
				UIView.transition(
					with: kiwi, duration: 0.2,
					options: .transitionFlipFromLeft,
					animations: {
						if tabbarController?.viewControllers != nil {
							tabbarController?.viewControllers![3] = profile
						}
					}
				)
				
			}, style: .destructive)
		]
		let alert = GenericAlertPresenter(
			title: l10n(.signOut), actions: actions
		)
		alert.present(in: self)
	}

}
