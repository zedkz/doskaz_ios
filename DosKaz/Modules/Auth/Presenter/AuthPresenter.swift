//
//  AuthPresenter.swift
//  Auth
//
//  Generated by ModuleGenerator.
//  Copyright Â© 2020-06-17 07:43:27 +0000 lobster.kz. All rights reserved.
//
import SharedCodeFramework

enum AuthOrigin {
	case tab, anywhere(AuthDestination)
}

protocol AuthViewOutput {
	func initView(with origin: AuthOrigin)
	func viewIsReady()
}
		
class AuthPresenter: AuthViewOutput {
	
	weak var view: AuthViewInput!
	var interactor: AuthInteractorInput!
	var router: AuthRouterInput!

	var origin = AuthOrigin.tab
	var verificationID: String?
	
	func initView(with origin: AuthOrigin) {
		self.origin = origin
	}

	func viewIsReady() {
		view.setupInitialState()
		view.onTouchNext = CommandWith<String> { [weak self] text in
			self?.view?.viewPage = .loading
			self?.interactor.verify(phoneNumber: text)
		}
		view.onTouchSend = CommandWith<String> { [weak self] text in
			if let id = self?.verificationID {
				self?.view?.viewPage = .loading
				self?.interactor.signIn(with: text, id: id)
			}
		}
		view.onTouchResend = Command { [weak self] in
			self?.verificationID = nil
			self?.view.viewPage = .first
		}
		view.onTouchToProfile = Command { [weak self] in
			guard let self = self else { return }
			self.router.showProfile(for: self.view)
		}
		view.onTouchNotNow = Command { [weak self] in
			guard let self = self else { return }
			if case let .anywhere(destination) = self.origin {
				self.router.showDestination(for: self.view, destination: destination)
			}
		}
	}
	
}


// MARK: Interactor output protocol

protocol AuthInteractorOutput: class {
	func didSucceed(with verificationID: String)
	func didFailVerify(with error: Error)
	func didSucceedSignIn()
	func didFailSignIn(with error: Error)
}

extension AuthPresenter: AuthInteractorOutput {
	func didSucceedSignIn() {
		view.viewPage = .third(origin)
	}
	
	func didFailSignIn(with error: Error) {
		view.viewPage = .second
		view.displayAlert(with: error.localizedDescription)
	}
	
	func didSucceed(with verificationID: String) {
		print("V code:", verificationID)
		self.verificationID = verificationID
		view.viewPage = .second
	}
	
	func didFailVerify(with error: Error) {
		view.viewPage = .first
		view.displayAlert(with: error.localizedDescription)
	}

}
