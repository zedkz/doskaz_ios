//
//  AuthInteractor.swift
//  Auth
//
//  Generated by ModuleGenerator.
//  Copyright Â© 2020-06-17 07:43:27 +0000 lobster.kz. All rights reserved.
//

import FirebaseAuth

protocol AuthInteractorInput {
	func verify(phoneNumber: String)
	func signIn(with verificationCode: String, id verificationID: String)
	func signInWithOauth(code: String, provider: Provider)
}

// MARK: Implementation

class AuthInteractor: AuthInteractorInput {

	weak var output: AuthInteractorOutput!
	
	func signInWithOauth(code: String, provider: Provider) {
		let request = APIGetOauthToken(onSuccess: { (dkToken) in
			AppSettings.token = dkToken.token
			print("Anton token: ", dkToken.token)
			self.output?.didSucceedSignIn()
		}, onFailure: { (error) in
			self.output?.didFailSignIn(with: error)
			print(error.localizedDescription)
		},
			 oauthToken: OauthToken(provider: provider.rawValue, code: code)
		)
		request.dispatch()
	}
	
	func verify(phoneNumber: String) {
		PhoneAuthProvider.provider().verifyPhoneNumber(phoneNumber, uiDelegate: nil) { [weak self] (verificationID, error) in
			guard let self = self else { return }
			if let error = error {
				self.output?.didFailVerify(with: error)
				return
			}
			
			if let id = verificationID {
				self.output?.didSucceed(with: id)
			}
		}
	}
	
	func signIn(with verificationCode: String, id verificationID: String) {
		
		let credential = PhoneAuthProvider.provider().credential(
			withVerificationID: verificationID,
			verificationCode: verificationCode
		)
		
		Auth.auth().signIn(with: credential) { [weak self] (authResult, error) in
			guard let self = self else { return }
			if let error = error {
				self.output?.didFailSignIn(with: error)
				return
			}
			
			authResult?.user.getIDToken(completion: { (idToken, error) in
				guard let fireToken = idToken else {
					self.output?.didFailSignIn(with: error!)
					return
				}
				
				let request = APIGetPhoneToken(onSuccess: { (dkToken) in
					AppSettings.token = dkToken.token
					self.output?.didSucceedSignIn()
				}, onFailure: { error in
					self.output?.didFailSignIn(with: error)
				},
					 fireBaseToken: FireToken(idToken: fireToken)
				)
				request.dispatch()
				
			})

		}
	}

}
