//
//  SearchResultsViewControllerViewController.swift
//  SearchResultsViewController
//
//  Generated by ModuleGenerator.
//  Copyright Â© 2020-03-01 13:52:49 +0000 lobster.kz. All rights reserved.
//

import SharedCodeFramework

// MARK: View input protocol

protocol SearchResultsViewControllerViewInput: class {
	func setupInitialState()
	func showResults(with results: [BasicCell.Props])
	var updateSearchResults: CommandWith<String> { get set }
	var didTouchUpInside: Button.DidTapButton? { get set }
}

extension SearchResultsViewControllerViewController: SearchResultsViewControllerViewInput {

	func setupInitialState() {
		view.backgroundColor = .white
		configureTableViewStyle()
		configureTableViewLayout()
		configureTableViewDataSource()
	}
	
	func showResults(with results: [BasicCell.Props]) {
		dataSource.cellsProps = results
		tableView.reloadData()
	}

}


class SearchResultsViewControllerViewController: UIViewController, UISearchResultsUpdating {
	
	// MARK: Properties
	var output: SearchResultsViewControllerViewOutput!
	
	private var tableView: UITableView!
	private var dataSource: TableViewDataSource<BasicCell.Props, BasicCell>!
	private var showOnMapButton = Button(type: .system)
	var didTouchUpInside: Button.DidTapButton? = nil {
		didSet {
			showOnMapButton.didTouchUpInside = didTouchUpInside
		}
	}
	
	var updateSearchResults: CommandWith<String> = .nop

	// MARK: Life cycle
	override func viewDidLoad() {
		super.viewDidLoad()
		output.viewIsReady()
	}
	
	func updateSearchResults(for searchController: UISearchController) {
		guard let text = searchController.searchBar.text else { return }
		updateSearchResults.perform(with: text)
	}
	
	// MARK: Private methods
	
	private func configureTableViewStyle() {
		let tableView = UITableView(frame: .zero, style: .plain)
		tableView.tableFooterView = UIView()
		tableView.keyboardDismissMode = .onDrag
		self.tableView = tableView
		
		showOnMapButton.decorate(with:
			Style.systemFont(size: 14),
			Style.titleColor(color: .white),
			Style.backgroundColor(color: UIColor.init(named: "SelectedTabbarTintColor"))
		)
		
		showOnMapButton.setTitle(l10n(.showOnMap), for: .normal)
	}
	
	private func configureTableViewLayout() {
		view.addSubview(tableView)
		
		
		tableView.translatesAutoresizingMaskIntoConstraints = false
		showOnMapButton.translatesAutoresizingMaskIntoConstraints = false
		
		let tc = [
			tableView.leadingAnchor.constraint(equalTo: view.safeLayoutGuide.leadingAnchor),
			tableView.topAnchor.constraint(equalTo: view.safeLayoutGuide.topAnchor),
			tableView.trailingAnchor.constraint(equalTo: view.safeLayoutGuide.trailingAnchor),
			tableView.bottomAnchor.constraint(equalTo: view.safeLayoutGuide.bottomAnchor)
		]
	
		NSLayoutConstraint.activate(tc)
	}
	
	private func configureTableViewDataSource() {
		dataSource = TableViewDataSource(tableView){ (props: BasicCell.Props, cell: BasicCell) in
			cell.props = props
		}
		
		tableView.dataSource = dataSource
	}

}
