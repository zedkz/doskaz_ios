//
//  VenuePhotosViewController.swift
//  VenuePhotos
//
//  Generated by ModuleGenerator.
//  Copyright Â© 2020-05-27 10:33:42 +0000 lobster.kz. All rights reserved.
//

import UIKit
import SharedCodeFramework

// MARK: View input protocol

protocol VenuePhotosViewInput where Self: UIViewController {
	func setupInitialState()
	func update(_ photos: [Photo])
}

class VenuePhotosViewController: UIViewController, VenuePhotosViewInput {
	
	var output: VenuePhotosViewOutput!
	
	private let titleLabel = UILabel()
	private let addButton = UIButton(type: .system)
	
	private let collectionView = ContentSizedCollectionView(frame: .zero, collectionViewLayout: UICollectionViewFlowLayout())
	private var collectionDataSource: CollectionViewDataSource<VenuePhotoCell.Props,VenuePhotoCell>!
	private var delegate = VenueCollectionDelegate()
	
	func setupInitialState() {
		addButton.addTarget(self, action: #selector(addPhotos), for: .touchUpInside)
		addButton.setTitle("+", for: .normal)
		addButton.decorate(with: Style.systemFont(size: 20, weight: .bold))

		view.addSubview(addButton)
		view.backgroundColor = .white
		view.addSubview(titleLabel)
		view.addSubview(collectionView)
		collectionView.addConstraintsProgrammatically
			.pin(my: .top, to: .bottom, of: titleLabel, plus: 10)
			.pinEdgeToSupersSafe(.trailing, plus: -16)
			.pinEdgeToSupersSafe(.leading, plus: 16)
			.pinEdgeToSupersSafe(.bottom, plus: -16)
			.set(my: .height, .greaterThanOrEqual, to: 90)
		titleLabel.addConstraintsProgrammatically
			.pinEdgeToSupersSafe(.leading, plus: 16)
			.pinEdgeToSupersSafe(.top, plus: 16)
		addButton.addConstraintsProgrammatically
			.pinEdgeToSupersSafe(.trailing, plus: -16)
			.pin(my: .bottom, andOf: titleLabel)
		
		titleLabel.text = l10n(.photo).uppercased()
		titleLabel.decorate(with: Style.systemFont(size: 14, weight: .bold))
		
		configureCollectionView()
	}
	
	@objc func addPhotos() {
		output.didPressAddPhotos()
	}
	
	private func configureCollectionView() {
		let flowLayout = UICollectionViewFlowLayout()
		flowLayout.scrollDirection = .vertical
		collectionView.collectionViewLayout = flowLayout
		collectionView.alwaysBounceVertical = true
		collectionView.showsVerticalScrollIndicator = true
		collectionView.backgroundColor = .white
		collectionView.delegate = delegate
		collectionDataSource = CollectionViewDataSource(collectionView) { $1.props = $0 }
		collectionView.dataSource = collectionDataSource
		collectionView.isScrollEnabled = false
	}
	
	func update(_ photos: [Photo]) {
		let urls = photos.compactMap { URL(string: Constants.mainURL + $0.viewUrl) }
		let imageCollectionViewCells: [VenuePhotoCell.Props] = photos.enumerated().map { (index: Int, photo: Photo) in
			return VenuePhotoCell.Props(
				image: photo.previewUrl,
				index: index,
				urls: urls
			)
		}
		
		var allCells = [VenuePhotoCell.Props]()
		
		allCells.append(contentsOf: imageCollectionViewCells)
		
		collectionDataSource.cellsProps = allCells
		collectionView.reloadData()
	}
}

// MARK: Life cycle

extension VenuePhotosViewController {
	
	override func viewDidLoad() {
		super.viewDidLoad()
		output.viewIsReady()
	}
	
	override func viewWillAppear(_ animated: Bool) {
		super.viewWillAppear(animated)
		output.viewWillAppear()
	}

}
