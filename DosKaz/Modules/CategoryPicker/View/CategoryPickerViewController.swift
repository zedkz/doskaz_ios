//
//  CategoryPickerViewController.swift
//  CategoryPicker
//
//  Generated by ModuleGenerator.
//  Copyright Â© 2020-02-24 12:15:36 +0000 lobster.kz. All rights reserved.
//

import UIKit

// MARK: View input protocol

protocol CategoryPickerViewInput: class {
	func setupInitialState()
	func update(with categories: [CategoryPickerViewController.Category])
}

extension CategoryPickerViewController: CategoryPickerViewInput {

	func setupInitialState() {
		view.backgroundColor = .white
		configureTableViewStyle()
		configureTableViewLayout()
		configureTableViewDataSource()
	}
	
	func update(with categories: [Category]) {
		dataSource.cellsProps = categories
		tableView.reloadData()
	}

}


class CategoryPickerViewController: UIViewController {

	// MARK: Properties
	var output: CategoryPickerViewOutput!
	private var tableView: UITableView!
	private var dataSource: TableViewDataSource<Category, UITableViewCell>!

	// MARK: Life cycle
	override func viewDidLoad() {
		super.viewDidLoad()
		output.viewIsReady()
	}

	
	// MARK: Private methods
	
	private func configureTableViewStyle() {
		let tableView = UITableView(frame: .zero, style: .plain)
		tableView.tableFooterView = UIView()
		self.tableView = tableView
	}
	
	private func configureTableViewLayout() {
		view.addSubview(tableView)
		tableView.addConstraintsProgrammatically
			.pinToSuperSafeArea()
	}
	
	private func configureTableViewDataSource() {
		dataSource = TableViewDataSource(tableView){ (p: Category,c: UITableViewCell) in
			c.textLabel?.numberOfLines = 0
			c.accessoryType = .disclosureIndicator
			c.textLabel?.text = "\(p.name)"
			c.imageView?.image = UIImage(named: p.imageName)
			let backgroundView = UIView()
			backgroundView.backgroundColor = UIColor(named: "CategoryPickerSelectedCell")
			c.selectedBackgroundView = backgroundView
		}
		
		tableView.dataSource = dataSource
	}
	
}


extension CategoryPickerViewController {
	struct Category {
		let name: String
		let imageName: String
	}
}

